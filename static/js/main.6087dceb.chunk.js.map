{"version":3,"sources":["components/QuizQuestion/index.js","App.js","serviceWorker.js","index.js"],"names":["QuizQuestion","this","props","question","answers","map","v","type","value","text","className","onClick","nextQuestion","React","Component","TitlePage","state","titleText","currentState","counter","currentQuestion","timeLimit","clearInterval","timer","setState","console","log","setInterval","questions","possibleAnswers","id","start","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6hBAkBeA,G,uLAfH,IAAD,OACP,OACE,oCACA,4BAAKC,KAAKC,MAAMC,UACfF,KAAKC,MAAME,QAAQC,KAAI,SAACC,GACvB,OAAO,2BAAOC,KAAK,SACnBC,MAAOF,EAAEG,KACTC,UAAU,eACVC,QAAS,kBAAM,EAAKT,MAAMU,0B,GATPC,IAAMC,Y,OCO3BC,E,YACJ,WAAYb,GAAQ,IAAD,8BACjB,4CAAMA,KACDc,MAAQ,CAACC,UAAW,uBACzBC,aARgB,EAShBC,QAAS,EACTC,gBAAiB,GACjB,EAAKD,QAAU,EACf,EAAKE,UAVU,GAGE,E,4EAUjBC,cAAcrB,KAAKsB,OACnBtB,KAAKuB,SAAS,CACZP,UAAW,sBACXC,aAlBc,M,8BAsBT,IAAD,OACNO,QAAQC,IAAI,aACZzB,KAAKuB,SAAS,CAACL,QAAQ,IACvBlB,KAAKuB,SAAS,CAACN,aAxBI,IAyBnBjB,KAAKsB,MAAQI,aAAY,WACvBF,QAAQC,IAAI,mBACZ,EAAKF,SAAS,CAACL,QAAU,EAAKH,MAAMG,QAAQ,IACzC,EAAKH,MAAMG,QAAU,EAAKE,UAC3B,EAAKG,SAAS,CAACP,UAAU,kBAAoB,EAAKD,MAAMG,WAExD,EAAKK,SAAS,CAACP,UAAU,eACzBK,cAAc,EAAKC,UAEpB,O,6BAECrB,GAAQ,IAAD,OAEb,OADCuB,QAAQC,IAAIzB,KAAKe,MAAME,cAEtB,yBAAKR,UAAU,OACb,6BAAMT,KAAKoB,UAAYpB,KAAKe,MAAMG,SAxCjB,IAyCflB,KAAKe,MAAME,aACb,kBAAC,EAAD,CAAcd,QAASwB,EAAU3B,KAAKe,MAAMI,iBAAiBS,gBAC7D1B,SAAUyB,EAAU3B,KAAKe,MAAMI,iBAAiBjB,SAChDS,aAAc,kBAAM,EAAKA,kBAEzB,wBAAIF,UAAU,SAAST,KAAKe,MAAMC,WAClC,2BAAOa,GAAG,cAAcvB,KAAK,SAASC,MAAM,QAAQG,QAAS,kBAAM,EAAKoB,gB,GA5CtDlB,IAAMC,WAwDfkB,MANf,WACE,OACE,kBAAC,EAAD,OCjDgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.6087dceb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass QuizQuestion extends React.Component{\r\n  render() {\r\n    return(\r\n      <>\r\n      <h2>{this.props.question}</h2>\r\n      {this.props.answers.map((v) => {\r\n        return <input type=\"button\"\r\n        value={v.text}\r\n        className=\"answerButton\"\r\n        onClick={() => this.props.nextQuestion()}></input>\r\n      })}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuizQuestion","import React from 'react';\r\nimport './App.css';\r\nimport QuizQuestion from './components/QuizQuestion'\r\nimport questions from './question.json'\r\n\r\nconst TITLE_STATE = 0\r\nconst QUESTION_STATE = 1\r\nconst TIME_LIMIT = 10\r\n\r\nclass TitlePage extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {titleText: \"Welcome to our Quiz!\",\r\n    currentState: TITLE_STATE,\r\n    counter: 0,\r\n    currentQuestion: 0}\r\n    this.counter = 0\r\n    this.timeLimit = TIME_LIMIT\r\n  }\r\n  nextQuestion(){\r\n    clearInterval(this.timer)\r\n    this.setState({\r\n      titleText: \"You Answered Early!\",\r\n      currentState: TITLE_STATE\r\n    })\r\n  }\r\n\r\n  start() {\r\n    console.log(\"Starting!\")\r\n    this.setState({counter:0})\r\n    this.setState({currentState: QUESTION_STATE})\r\n    this.timer = setInterval(() => {\r\n      console.log(\"Interval Called\")\r\n      this.setState({counter : this.state.counter+1})\r\n      if(this.state.counter < this.timeLimit) {\r\n        this.setState({titleText:\"Begin the quiz!\" + this.state.counter})\r\n      } else {\r\n        this.setState({titleText:\"Time's up!\"})\r\n        clearInterval(this.timer)\r\n      }\r\n    }, 1000);\r\n  }\r\n render(props) {\r\n   console.log(this.state.currentState)\r\n  return (\r\n    <div className='App'>\r\n      <div>{this.timeLimit - this.state.counter}</div>\r\n      {(this.state.currentState === QUESTION_STATE) ?\r\n      <QuizQuestion answers={questions[this.state.currentQuestion].possibleAnswers}\r\n      question={questions[this.state.currentQuestion].question}\r\n      nextQuestion={() => this.nextQuestion()} />\r\n      :\r\n      <h1 className='title'>{this.state.titleText}</h1>}\r\n      <input id='startButton' type=\"button\" value=\"Start\" onClick={() => this.start()}></input>\r\n    </div>\r\n  )\r\n } \r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <TitlePage />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}